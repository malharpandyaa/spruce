[{"id":null,"type":"text","data":"// clipboard.js\nconst { ipcRenderer, clipboard, nativeImage } = require('electron');\nconst fs = require('fs');\nconst path = require('path');\nconst clipboardList = document.getElementById('clipboard-list');\n\nlet clipboardHistory = [];\nlet deletedItems = new Set();\nlet activeProject = 'Default';\nlet nextId = 0; // Initialize the nextId for unique IDs\n\n// Paths\nfunction getDataPath() {\n  return path.join(__dirname, 'data', activeProject, 'clipboard.json');\n}\n\n// Load clipboard history from file\nfunction loadClipboardHistory() {\n  const dataPath = getDataPath();\n  if (fs.existsSync(dataPath)) {\n    const data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));\n    clipboardHistory = data.map((item) => {\n      if (item.type === 'image') {\n        const imagePath = path.join(path.dirname(dataPath), item.data);\n        if (fs.existsSync(imagePath)) {\n          const image = nativeImage.createFromPath(imagePath);\n          item.data = image.toDataURL();\n          return item;\n        } else {\n          return null;\n        }\n      } else {\n        return item;\n      }\n    }).filter(Boolean);\n\n    // Update nextId to avoid ID collisions\n    nextId = clipboardHistory.reduce((maxId, item) => Math.max(maxId, item.id), 0) + 1;\n\n    clipboardHistory.forEach((item) => addClipboardItem(item, false));\n  } else {\n    clipboardHistory = [];\n  }\n}\n\n// Save clipboard history to file\nfunction saveClipboardHistory() {\n  const dataPath = getDataPath();\n  const dirPath = path.dirname(dataPath);\n  if (!fs.existsSync(dirPath)) {\n    fs.mkdirSync(dirPath, { recursive: true });\n  }\n\n  // Save images as separate files\n  const dataToSave = clipboardHistory.map((item, index) => {\n    if (item.type === 'image') {\n      const imageFileName = `image_${item.id}.png`;\n      const imagePath = path.join(dirPath, imageFileName);\n      const image = nativeImage.createFromDataURL(item.data);\n      fs.writeFileSync(imagePath, image.toPNG());\n      return { id: item.id, type: 'image', data: imageFileName };\n    } else {\n      return { id: item.id, type: item.type, data: item.data };\n    }\n  });\n\n  fs.writeFileSync(dataPath, JSON.stringify(dataToSave));\n}\n\n// Monitor clipboard changes\nsetInterval(() => {\n  const currentText = clipboard.readText();\n  const currentImage = clipboard.readImage();\n\n  if (!currentImage.isEmpty()) {\n    // Handle image clipboard data\n    const imageDataUrl = currentImage.toDataURL();\n    if (\n      clipboardHistory.length === 0 ||\n      clipboardHistory[0].data !== imageDataUrl\n    ) {\n      const item = { id: nextId++, type: 'image', data: imageDataUrl };\n      clipboardHistory.unshift(item);\n      addClipboardItem(item, true);\n      deletedItems.clear();\n      saveClipboardHistory();\n    }\n  } else if (currentText) {\n    // Handle text clipboard data\n    if (\n      clipboardHistory.length === 0 ||\n      clipboardHistory[0].data !== currentText\n    ) {\n      const item = { id: nextId++, type: 'text', data: currentText };\n      clipboardHistory.unshift(item);\n      addClipboardItem(item, true);\n      deletedItems.clear();\n      saveClipboardHistory();\n    }\n  }\n}, 1000);\n\nfunction addClipboardItem(item, save = true) {\n  const { id, type, data } = item;\n  const listItem = document.createElement('li');\n  listItem.dataset.id = id; // Store the id in the DOM element\n\n  // Create a container for the content\n  const contentDiv = document.createElement('div');\n  contentDiv.className = 'clipboard-content';\n\n  if (type === 'text') {\n    // Display text data\n    const textSpan = document.createElement('span');\n    textSpan.textContent = data;\n    contentDiv.appendChild(textSpan);\n  } else if (type === 'image') {\n    // Display image data\n    const img = document.createElement('img');\n    img.src = data;\n    img.alt = 'Clipboard Image';\n    contentDiv.appendChild(img);\n  }\n\n  // Create a copy button\n  const copyButton = document.createElement('button');\n  copyButton.className = 'copy-button';\n  copyButton.innerHTML = '<i class=\"fas fa-copy\"></i>';\n\n  copyButton.addEventListener('click', () => {\n    if (type === 'text') {\n      clipboard.writeText(data);\n    } else if (type === 'image') {\n      const image = nativeImage.createFromDataURL(data);\n      clipboard.writeImage(image);\n    }\n    // Provide visual feedback (optional)\n    copyButton.innerHTML = '<i class=\"fas fa-check\"></i>';\n    setTimeout(() => {\n      copyButton.innerHTML = '<i class=\"fas fa-copy\"></i>';\n    }, 1000);\n  });\n\n  // Create a delete button\n  const deleteButton = document.createElement('button');\n  deleteButton.className = 'delete-clipboard';\n  deleteButton.innerHTML = '<i class=\"fas fa-trash-alt\"></i>';\n\n  deleteButton.addEventListener('click', () => {\n    // Remove from clipboardHistory array using the id\n    const index = clipboardHistory.findIndex((entry) => entry.id === id);\n    if (index !== -1) {\n      // If it's an image, delete the image file\n      if (clipboardHistory[index].type === 'image') {\n        const imageFileName = clipboardHistory[index].data;\n        const imagePath = path.join(path.dirname(getDataPath()), imageFileName);\n        if (fs.existsSync(imagePath)) {\n          fs.unlinkSync(imagePath);\n        }\n      }\n      clipboardHistory.splice(index, 1);\n    }\n    // Remove from the DOM\n    listItem.remove();\n    saveClipboardHistory();\n  });\n\n  // Append elements to the list item\n  listItem.appendChild(contentDiv);\n  listItem.appendChild(copyButton);\n  listItem.appendChild(deleteButton);\n\n  // Add the list item to the clipboard list\n  clipboardList.insertBefore(listItem, clipboardList.firstChild);\n\n  if (save) {\n    saveClipboardHistory();\n  }\n}\n\n// Handle minimize button\nconst minimizeButton = document.getElementById('minimize-button');\nminimizeButton.addEventListener('click', () => {\n  ipcRenderer.send('minimize-window', 'clipboard');\n});\n\n// Handle project changes\nipcRenderer.on('active-project', (event, newProject) => {\n  activeProject = newProject;\n  // Clear current data\n  clipboardHistory = [];\n  deletedItems = new Set();\n  clipboardList.innerHTML = '';\n  // Load data for the new project\n  loadClipboardHistory();\n});\n\n// Initial load\nipcRenderer.on('active-project', (event, newProject) => {\n  activeProject = newProject;\n  loadClipboardHistory();\n});\n"},{"type":"text","data":"https://github.com/malharpandyaa/portfoliowebsite.git"},{"type":"text","data":"https://github.com/malharpandyaa/portfoliowebsite"},{"type":"text","data":"<!-- dashboard.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Dashboard</title>\n  <!-- Include styles and fonts -->\n  <!-- Google Fonts -->\n  <link href=\"https://fonts.googleapis.com/css2?family=Roboto&display=swap\" rel=\"stylesheet\">\n  <!-- Stylesheet -->\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  <style>\n    body {\n      font-family: 'Roboto', sans-serif;\n      margin: 0;\n      padding: 20px;\n    }\n\n    h2 {\n      margin-top: 0;\n    }\n\n    #project-list {\n      list-style: none;\n      padding: 0;\n    }\n\n    #project-list li {\n      padding: 10px;\n      background-color: #c8e6c9;\n      margin-bottom: 5px;\n      border-radius: 4px;\n    }\n\n    #project-list li.active {\n      background-color: #a5d6a7;\n    }\n\n    #project-list li .project-info {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    #project-list li span {\n      flex-grow: 1;\n    }\n\n    #project-list li button {\n      margin-left: 5px;\n    }\n\n    #new-project {\n      display: flex;\n      margin-bottom: 10px;\n    }\n\n    #new-project input {\n      flex-grow: 1;\n      margin-right: 5px;\n    }\n\n    .remote-url {\n      width: 100%;\n      margin-top: 5px;\n      padding: 8px;\n      border: 1px solid #a5d6a7;\n      border-radius: 4px;\n      box-sizing: border-box;\n      background-color: #f1f8e9;\n    }\n  </style>\n</head>\n<body>\n  <h2>Projects</h2>\n  <div id=\"new-project\">\n    <input type=\"text\" id=\"project-name\" placeholder=\"New project name\" />\n    <button id=\"add-project\">Add</button>\n  </div>\n  <ul id=\"project-list\"></ul>\n\n  <script>\n    const { ipcRenderer } = require('electron');\n    const fs = require('fs');\n    const path = require('path');\n\n    let activeProject = 'Default';\n    let projects = [];\n\n    const projectList = document.getElementById('project-list');\n    const projectNameInput = document.getElementById('project-name');\n    const addProjectButton = document.getElementById('add-project');\n\n    // Load projects from storage\n    function loadProjects() {\n      const projectsPath = path.join(__dirname, 'projects.json');\n      if (fs.existsSync(projectsPath)) {\n        projects = JSON.parse(fs.readFileSync(projectsPath, 'utf8'));\n      } else {\n        projects = [{ name: 'Default', remote: '' }];\n        saveProjects();\n      }\n    }\n\n    // Save projects to storage\n    function saveProjects() {\n      const projectsPath = path.join(__dirname, 'projects.json');\n      fs.writeFileSync(projectsPath, JSON.stringify(projects));\n    }\n\n    // Render project list\n    function renderProjects() {\n      projectList.innerHTML = '';\n      projects.forEach((project) => {\n        const listItem = document.createElement('li');\n        if (project.name === activeProject) {\n          listItem.classList.add('active');\n        }\n\n        const projectInfoDiv = document.createElement('div');\n        projectInfoDiv.className = 'project-info';\n\n        const projectSpan = document.createElement('span');\n        projectSpan.textContent = project.name;\n\n        const selectButton = document.createElement('button');\n        selectButton.textContent = 'Select';\n        selectButton.addEventListener('click', () => {\n          activeProject = project.name;\n          ipcRenderer.send('switch-project', activeProject);\n          renderProjects();\n        });\n\n        const deleteButton = document.createElement('button');\n        deleteButton.textContent = 'Delete';\n        deleteButton.addEventListener('click', () => {\n          if (project.name === 'Default') {\n            alert('Cannot delete the Default project.');\n            return;\n          }\n          projects = projects.filter((p) => p.name !== project.name);\n          deleteProjectData(project.name);\n          saveProjects();\n          if (activeProject === project.name) {\n            activeProject = 'Default';\n            ipcRenderer.send('switch-project', activeProject);\n          }\n          renderProjects();\n        });\n\n        projectInfoDiv.appendChild(projectSpan);\n        projectInfoDiv.appendChild(selectButton);\n        projectInfoDiv.appendChild(deleteButton);\n\n        // Remote repository URL input\n        const remoteInput = document.createElement('input');\n        remoteInput.type = 'text';\n        remoteInput.placeholder = 'Remote repository URL';\n        remoteInput.value = project.remote || '';\n        remoteInput.className = 'remote-url';\n\n        remoteInput.addEventListener('change', () => {\n          project.remote = remoteInput.value.trim();\n          saveProjects();\n        });\n\n        listItem.appendChild(projectInfoDiv);\n        listItem.appendChild(remoteInput);\n\n        projectList.appendChild(listItem);\n      });\n    }\n\n    // Delete project data\n    function deleteProjectData(projectName) {\n      const dataDir = path.join(__dirname, 'data', projectName);\n      if (fs.existsSync(dataDir)) {\n        fs.rmSync(dataDir, { recursive: true, force: true });\n      }\n    }\n\n    // Add new project\n    addProjectButton.addEventListener('click', () => {\n      const projectName = projectNameInput.value.trim();\n      if (projectName && !projects.some((p) => p.name === projectName)) {\n        projects.push({ name: projectName, remote: '' });\n        saveProjects();\n        renderProjects();\n        projectNameInput.value = '';\n      } else {\n        alert('Invalid project name or project already exists.');\n      }\n    });\n\n    // Receive initialization data\n    ipcRenderer.on('initialize-dashboard', (event, currentProject) => {\n      activeProject = currentProject;\n      loadProjects();\n      renderProjects();\n    });\n  </script>\n</body>\n</html>\n"},{"type":"text","data":"npm install\n"},{"type":"image","data":"image_undefined.png"},{"type":"text","data":"{\n  \"name\": \"desktop-overlay-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"An Electron application with clipboard history, notes, tasks, and project management.\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"package\": \"electron-packager . desktop-overlay-app --platform=win32 --arch=x64 --icon=app.ico\"\n  },\n  \"dependencies\": {\n    \"electron\": \"^24.3.1\"\n  },\n  \"devDependencies\": {},\n  \"keywords\": [],\n  \"author\": \"Your Name\",\n  \"license\": \"MIT\"\n}\n"}]