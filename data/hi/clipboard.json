[{"id":null,"type":"text","data":".getElementById('minimiz"},{"id":null,"type":"text","data":"// clipboard.js\nconst { ipcRenderer, clipboard, nativeImage } = require('electron');\nconst fs = require('fs');\nconst path = require('path');\nconst clipboardList = document.getElementById('clipboard-list');\n\nlet clipboardHistory = [];\nlet deletedItems = new Set();\nlet activeProject = 'Default';\nlet nextId = 0; // Initialize the nextId for unique IDs\n\n// Paths\nfunction getDataPath() {\n  return path.join(__dirname, 'data', activeProject, 'clipboard.json');\n}\n\n// Load clipboard history from file\nfunction loadClipboardHistory() {\n  const dataPath = getDataPath();\n  if (fs.existsSync(dataPath)) {\n    const data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));\n    clipboardHistory = data.map((item) => {\n      if (item.type === 'image') {\n        const imagePath = path.join(path.dirname(dataPath), item.data);\n        if (fs.existsSync(imagePath)) {\n          const image = nativeImage.createFromPath(imagePath);\n          item.data = image.toDataURL();\n          return item;\n        } else {\n          return null;\n        }\n      } else {\n        return item;\n      }\n    }).filter(Boolean);\n\n    // Update nextId to avoid ID collisions\n    nextId = clipboardHistory.reduce((maxId, item) => Math.max(maxId, item.id), 0) + 1;\n\n    clipboardHistory.forEach((item) => addClipboardItem(item, false));\n  } else {\n    clipboardHistory = [];\n  }\n}\n\n// Save clipboard history to file\nfunction saveClipboardHistory() {\n  const dataPath = getDataPath();\n  const dirPath = path.dirname(dataPath);\n  if (!fs.existsSync(dirPath)) {\n    fs.mkdirSync(dirPath, { recursive: true });\n  }\n\n  // Save images as separate files\n  const dataToSave = clipboardHistory.map((item, index) => {\n    if (item.type === 'image') {\n      const imageFileName = `image_${item.id}.png`;\n      const imagePath = path.join(dirPath, imageFileName);\n      const image = nativeImage.createFromDataURL(item.data);\n      fs.writeFileSync(imagePath, image.toPNG());\n      return { id: item.id, type: 'image', data: imageFileName };\n    } else {\n      return { id: item.id, type: item.type, data: item.data };\n    }\n  });\n\n  fs.writeFileSync(dataPath, JSON.stringify(dataToSave));\n}\n\n// Monitor clipboard changes\nsetInterval(() => {\n  const currentText = clipboard.readText();\n  const currentImage = clipboard.readImage();\n\n  if (!currentImage.isEmpty()) {\n    // Handle image clipboard data\n    const imageDataUrl = currentImage.toDataURL();\n    if (\n      clipboardHistory.length === 0 ||\n      clipboardHistory[0].data !== imageDataUrl\n    ) {\n      const item = { id: nextId++, type: 'image', data: imageDataUrl };\n      clipboardHistory.unshift(item);\n      addClipboardItem(item, true);\n      deletedItems.clear();\n      saveClipboardHistory();\n    }\n  } else if (currentText) {\n    // Handle text clipboard data\n    if (\n      clipboardHistory.length === 0 ||\n      clipboardHistory[0].data !== currentText\n    ) {\n      const item = { id: nextId++, type: 'text', data: currentText };\n      clipboardHistory.unshift(item);\n      addClipboardItem(item, true);\n      deletedItems.clear();\n      saveClipboardHistory();\n    }\n  }\n}, 1000);\n\nfunction addClipboardItem(item, save = true) {\n  const { id, type, data } = item;\n  const listItem = document.createElement('li');\n  listItem.dataset.id = id; // Store the id in the DOM element\n\n  // Create a container for the content\n  const contentDiv = document.createElement('div');\n  contentDiv.className = 'clipboard-content';\n\n  if (type === 'text') {\n    // Display text data\n    const textSpan = document.createElement('span');\n    textSpan.textContent = data;\n    contentDiv.appendChild(textSpan);\n  } else if (type === 'image') {\n    // Display image data\n    const img = document.createElement('img');\n    img.src = data;\n    img.alt = 'Clipboard Image';\n    contentDiv.appendChild(img);\n  }\n\n  // Create a copy button\n  const copyButton = document.createElement('button');\n  copyButton.className = 'copy-button';\n  copyButton.innerHTML = '<i class=\"fas fa-copy\"></i>';\n\n  copyButton.addEventListener('click', () => {\n    if (type === 'text') {\n      clipboard.writeText(data);\n    } else if (type === 'image') {\n      const image = nativeImage.createFromDataURL(data);\n      clipboard.writeImage(image);\n    }\n    // Provide visual feedback (optional)\n    copyButton.innerHTML = '<i class=\"fas fa-check\"></i>';\n    setTimeout(() => {\n      copyButton.innerHTML = '<i class=\"fas fa-copy\"></i>';\n    }, 1000);\n  });\n\n  // Create a delete button\n  const deleteButton = document.createElement('button');\n  deleteButton.className = 'delete-clipboard';\n  deleteButton.innerHTML = '<i class=\"fas fa-trash-alt\"></i>';\n\n  deleteButton.addEventListener('click', () => {\n    // Remove from clipboardHistory array using the id\n    const index = clipboardHistory.findIndex((entry) => entry.id === id);\n    if (index !== -1) {\n      // If it's an image, delete the image file\n      if (clipboardHistory[index].type === 'image') {\n        const imageFileName = clipboardHistory[index].data;\n        const imagePath = path.join(path.dirname(getDataPath()), imageFileName);\n        if (fs.existsSync(imagePath)) {\n          fs.unlinkSync(imagePath);\n        }\n      }\n      clipboardHistory.splice(index, 1);\n    }\n    // Remove from the DOM\n    listItem.remove();\n    saveClipboardHistory();\n  });\n\n  // Append elements to the list item\n  listItem.appendChild(contentDiv);\n  listItem.appendChild(copyButton);\n  listItem.appendChild(deleteButton);\n\n  // Add the list item to the clipboard list\n  clipboardList.insertBefore(listItem, clipboardList.firstChild);\n\n  if (save) {\n    saveClipboardHistory();\n  }\n}\n\n// Handle minimize button\nconst minimizeButton = document.getElementById('minimize-button');\nminimizeButton.addEventListener('click', () => {\n  ipcRenderer.send('minimize-window', 'clipboard');\n});\n\n// Handle project changes\nipcRenderer.on('active-project', (event, newProject) => {\n  activeProject = newProject;\n  // Clear current data\n  clipboardHistory = [];\n  deletedItems = new Set();\n  clipboardList.innerHTML = '';\n  // Load data for the new project\n  loadClipboardHistory();\n});\n\n// Initial load\nipcRenderer.on('active-project', (event, newProject) => {\n  activeProject = newProject;\n  loadClipboardHistory();\n});\n"}]